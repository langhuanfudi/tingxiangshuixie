{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"index"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"about/","text":"\u545c\u54c8\u54c8\u54c8\u54c8\u54c8\u54c8","title":"about"},{"location":"cpp/","text":"\u53f3\u503c\u5f15\u7528\u4e0e\u79fb\u52a8\u8bed\u4e49 \u4e3a\u4f55\u9700\u8981\u79fb\u52a8\u8bed\u4e49 \u5047\u8bbe\u6211\u4eec\u8981\u505a\u8fd9\u6837\u4e00\u4e2a\u590d\u5236\u8fc7\u7a0b vector<string> vstr; // \u6784\u5efa\u4e00\u4e2a\u5305\u542b20000\u4e2astring\u7684vector, \u6bcf\u4e2astring\u67091000\u4e2a\u5b57\u7b26 vector<string> vstr_copy1(vstr); //vstr_copy1\u662fvstr\u7684\u590d\u5236 \u5728vector\u7c7b\u548cstring\u7c7b\u4e2d\u90fd\u4f1a\u5b9a\u4e49\u4e00\u4e2a\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5176\u4e2d\u4f7f\u7528\u4e86\u67d0\u4e2a\u7248\u672c\u7684new\u51fd\u6570\u3002\u4e3a\u4e86\u521d\u59cb\u5316vstr_copy1\uff0cvector \u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4f1a\u7528new\u6765\u7ed9\u8fd920000\u4e2astring\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u3002\u800c\u6bcf\u4e2astring\u5bf9\u8c61\u53c8\u4f1a\u7528string\u4e2d\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u4e3a1000\u4e2a\u5b57\u7b26\u5206\u914d\u5185\u5b58\u3002\u603b\u5171\u4f1a\u5c0620000000\u4e2a\u5b57\u7b26\u4ecevstr\u63a7\u5236\u7684\u5185\u5b58\u4e2d\u62f7\u8d1d\u5230vstr_copy1\u63a7\u5236\u7684\u5185\u5b58\u4e2d\u3002\u4f46\u662f\u8fd9\u6709\u65f6\u5019\u662f\u4e0d\u59a5\u5f53\u7684\uff0c\u6bd4\u5982\uff1a vector<string> allcaps(const vector<string> &vs){ vector<string> temp; //\u628avs\u4e2d\u6240\u6709\u5b57\u7b26\u7684\u5927\u5199\u5b58\u5165temp return temp; } vector<string> vstr; // \u6784\u5efa\u4e00\u4e2a\u5305\u542b20000\u4e2astring\u7684vector, \u6bcf\u4e2astring\u67091000\u4e2a\u5b57\u7b26 vector<string> vstr_copy1(vstr); //#1 vector<string> vstr_copy2(allcaps(vstr)); //#2 \u5bf9\u8bed\u53e5#2\u6765\u8bf4\uff0callcaps(vstr)\u521b\u5efa\u4e86\u5bf9\u8c61temp\uff0c\u7ba1\u7406\u4e8620000000\u4e2a\u5b57\u7b26\u3002vector\u7c7b\u548cstring\u7c7b\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u9700\u8981copy\u8fd9200000000\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u5220\u9664allcaps()\u8fd4\u56de\u7684\u4e34\u65f6\u5bf9\u8c61\uff0c\u505a\u4e86\u5927\u91cf\u7684\u65e0\u7528\u529f\u3002\u6bd4\u8f83\u597d\u7684\u65b9\u6cd5\u662f\uff0c\u4e0d\u9700\u8981copy\u8fd920000000\u4e2a\u5b57\u7b26\uff0c\u800c\u662f\u76f4\u63a5\u5c06\u5176\u6240\u6709\u6743\u8f6c\u8ba9\u7ed9vstr_copy2\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u5728\u8ba1\u7b97\u673a\u4e2d\u79fb\u52a8\u6587\u4ef6\uff0c\u6587\u4ef6\u5b9e\u9645\u7684\u4f4d\u7f6e\u6ca1\u53d8\u5316\uff0c\u53ea\u662f\u4fee\u6539\u4e86\u8bb0\u5f55\u3002\u8fd9\u88ab\u79f0\u4e3a\u79fb\u52a8\u8bed\u4e49(move semantics)\u3002 \u597d\u6bd4\u4f60\u5bb6\u4f4f\u5728\u4e0a\u6d77\uff0c\u73b0\u5728\u4f60\u5bb6\u4f4d\u7f6e\u5b8c\u5168\u6ca1\u53d8\uff0c\u4f46\u628a\u4e0a\u6d77\u76f4\u63a5\u6539\u540d\u53eb\u5317\u4eac\uff0c\u7136\u540e\u4f60\u5bb6\u5c31\u4f4f\u5728\u5317\u4eac\u4e86 \u8981\u5b9e\u73b0\u79fb\u52a8\u8bed\u4e49\u9700\u8981\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u8ba9\u7f16\u8bd1\u5668\u77e5\u9053\uff0c\u4ec0\u4e48\u65f6\u5019\u8981copy\uff0c\u4ec0\u4e48\u65f6\u5019\u4e0d\u8981\u3002\u53f3\u503c\u5f15\u7528\u5c31\u662f\u5e72\u8fd9\u4e2a\u7684\uff0c\u5bf9\u4e8e\u5e38\u89c4\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u7528const\u5de6\u503c\u5f15\u7528\u6765\u4f5c\u4e3a\u53c2\u6570\uff0c\u5c06\u8fd9\u4e2a\u5f15\u7528\u5173\u8054\u5230\u5de6\u503c\u5b9e\u53c2\uff0c\u5982\u8bed\u53e5#1\u4e2d\u7684vstr\u3002\u53e6\u5916\u5199\u4e00\u4e2a\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff0c\u7528\u53f3\u503c\u5f15\u7528\u4f5c\u4e3a\u53c2\u6570\uff0c\u5173\u8054\u5230\u53f3\u503c\u5b9e\u53c2\uff0c\u5982\u8bed\u53e5#2\u4e2d\u7684allcaps(vstr)\u3002\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u6267\u884c\u6df1\u590d\u5236\uff0c\u79fb\u52a8\u6784\u9020\u51fd\u6570\u53ea\u4fee\u6539\u8bb0\u5f55\u3002\u79fb\u52a8\u6784\u9020\u51fd\u6570\u8981\u628a\u6240\u6709\u6743\u8f6c\u79fb\u7ed9\u65b0\u5bf9\u8c61\uff0c\u53ef\u80fd\u4fee\u6539\u5176\u5b9e\u53c2\uff0c\u610f\u5473\u7740\u53f3\u503c\u5f15\u7528\u7684\u53c2\u6570\u4e0d\u662fconst\u7684\u3002 \u4e00\u4e2a\u79fb\u52a8\u793a\u4f8b class Useless { private: int n; // number of elements char *pc; // pointer to data static int ct; // number of objects void ShowObject() const; public: Useless(); explicit Useless(int k); Useless(int k, char ch); Useless(const Useless &f); // regular copy constructor Useless(Useless &&f); // move constructor ~Useless(); Useless operator+(const Useless &f) const; void ShowData() const; }; Useless::Useless(const Useless &f) : n(f.n) { ++ct; cout << \"copy const called; number of objects: \" << ct << endl; pc = new char[n]; for (int i = 0; i < n; i++) pc[i] = f.pc[i]; ShowObject(); } Useless::Useless(Useless &&f) { ++ct; cout << \"move constructor called; number of objects: \" << ct << endl; pc = f.pc; //steal address f.pc = nullptr; f.n = 0; ShowObject(); } \u8fd9\u91cc\u53ea\u5217\u4e3e\u4e86\u666e\u901a\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u548c\u79fb\u52a8\u6784\u9020\u51fd\u6570\u3002\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6267\u884c\u4e86\u6df1\u590d\u5236\uff0c\u800c\u79fb\u52a8\u6784\u9020\u51fd\u6570\u76f4\u63a5\u5c06pc\u6307\u5411\u73b0\u6709\u7684\u6570\u636e\u6765\u83b7\u53d6\u6240\u6709\u6743\u3002pc\u548cf.pc\u4e0d\u80fd\u6307\u5411\u540c\u4e00\u4e2a\u5730\u5740\uff0c\u56e0\u4e3a\u6790\u6784\u65f6\u4e0d\u80fddelete\u4e24\u6b21\uff0c\u6240\u4ee5\u8981\u5c06\u539f\u6765\u7684f.pc\u8bbe\u4e3anullptr\u3002\u8fd9\u91cc\u4fee\u6539\u4e86f\uff0c\u6240\u4ee5\u53c2\u6570\u58f0\u660e\u4e2d\u4e0d\u52a0const\u3002","title":"cpp"},{"location":"cpp/#_1","text":"","title":"\u53f3\u503c\u5f15\u7528\u4e0e\u79fb\u52a8\u8bed\u4e49"},{"location":"cpp/#_2","text":"\u5047\u8bbe\u6211\u4eec\u8981\u505a\u8fd9\u6837\u4e00\u4e2a\u590d\u5236\u8fc7\u7a0b vector<string> vstr; // \u6784\u5efa\u4e00\u4e2a\u5305\u542b20000\u4e2astring\u7684vector, \u6bcf\u4e2astring\u67091000\u4e2a\u5b57\u7b26 vector<string> vstr_copy1(vstr); //vstr_copy1\u662fvstr\u7684\u590d\u5236 \u5728vector\u7c7b\u548cstring\u7c7b\u4e2d\u90fd\u4f1a\u5b9a\u4e49\u4e00\u4e2a\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u5176\u4e2d\u4f7f\u7528\u4e86\u67d0\u4e2a\u7248\u672c\u7684new\u51fd\u6570\u3002\u4e3a\u4e86\u521d\u59cb\u5316vstr_copy1\uff0cvector \u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4f1a\u7528new\u6765\u7ed9\u8fd920000\u4e2astring\u5bf9\u8c61\u5206\u914d\u5185\u5b58\u3002\u800c\u6bcf\u4e2astring\u5bf9\u8c61\u53c8\u4f1a\u7528string\u4e2d\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6765\u4e3a1000\u4e2a\u5b57\u7b26\u5206\u914d\u5185\u5b58\u3002\u603b\u5171\u4f1a\u5c0620000000\u4e2a\u5b57\u7b26\u4ecevstr\u63a7\u5236\u7684\u5185\u5b58\u4e2d\u62f7\u8d1d\u5230vstr_copy1\u63a7\u5236\u7684\u5185\u5b58\u4e2d\u3002\u4f46\u662f\u8fd9\u6709\u65f6\u5019\u662f\u4e0d\u59a5\u5f53\u7684\uff0c\u6bd4\u5982\uff1a vector<string> allcaps(const vector<string> &vs){ vector<string> temp; //\u628avs\u4e2d\u6240\u6709\u5b57\u7b26\u7684\u5927\u5199\u5b58\u5165temp return temp; } vector<string> vstr; // \u6784\u5efa\u4e00\u4e2a\u5305\u542b20000\u4e2astring\u7684vector, \u6bcf\u4e2astring\u67091000\u4e2a\u5b57\u7b26 vector<string> vstr_copy1(vstr); //#1 vector<string> vstr_copy2(allcaps(vstr)); //#2 \u5bf9\u8bed\u53e5#2\u6765\u8bf4\uff0callcaps(vstr)\u521b\u5efa\u4e86\u5bf9\u8c61temp\uff0c\u7ba1\u7406\u4e8620000000\u4e2a\u5b57\u7b26\u3002vector\u7c7b\u548cstring\u7c7b\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u9700\u8981copy\u8fd9200000000\u4e2a\u5b57\u7b26\uff0c\u7136\u540e\u5220\u9664allcaps()\u8fd4\u56de\u7684\u4e34\u65f6\u5bf9\u8c61\uff0c\u505a\u4e86\u5927\u91cf\u7684\u65e0\u7528\u529f\u3002\u6bd4\u8f83\u597d\u7684\u65b9\u6cd5\u662f\uff0c\u4e0d\u9700\u8981copy\u8fd920000000\u4e2a\u5b57\u7b26\uff0c\u800c\u662f\u76f4\u63a5\u5c06\u5176\u6240\u6709\u6743\u8f6c\u8ba9\u7ed9vstr_copy2\u3002\u8fd9\u7c7b\u4f3c\u4e8e\u5728\u8ba1\u7b97\u673a\u4e2d\u79fb\u52a8\u6587\u4ef6\uff0c\u6587\u4ef6\u5b9e\u9645\u7684\u4f4d\u7f6e\u6ca1\u53d8\u5316\uff0c\u53ea\u662f\u4fee\u6539\u4e86\u8bb0\u5f55\u3002\u8fd9\u88ab\u79f0\u4e3a\u79fb\u52a8\u8bed\u4e49(move semantics)\u3002 \u597d\u6bd4\u4f60\u5bb6\u4f4f\u5728\u4e0a\u6d77\uff0c\u73b0\u5728\u4f60\u5bb6\u4f4d\u7f6e\u5b8c\u5168\u6ca1\u53d8\uff0c\u4f46\u628a\u4e0a\u6d77\u76f4\u63a5\u6539\u540d\u53eb\u5317\u4eac\uff0c\u7136\u540e\u4f60\u5bb6\u5c31\u4f4f\u5728\u5317\u4eac\u4e86 \u8981\u5b9e\u73b0\u79fb\u52a8\u8bed\u4e49\u9700\u8981\u901a\u8fc7\u67d0\u79cd\u65b9\u5f0f\u8ba9\u7f16\u8bd1\u5668\u77e5\u9053\uff0c\u4ec0\u4e48\u65f6\u5019\u8981copy\uff0c\u4ec0\u4e48\u65f6\u5019\u4e0d\u8981\u3002\u53f3\u503c\u5f15\u7528\u5c31\u662f\u5e72\u8fd9\u4e2a\u7684\uff0c\u5bf9\u4e8e\u5e38\u89c4\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\uff0c\u7528const\u5de6\u503c\u5f15\u7528\u6765\u4f5c\u4e3a\u53c2\u6570\uff0c\u5c06\u8fd9\u4e2a\u5f15\u7528\u5173\u8054\u5230\u5de6\u503c\u5b9e\u53c2\uff0c\u5982\u8bed\u53e5#1\u4e2d\u7684vstr\u3002\u53e6\u5916\u5199\u4e00\u4e2a\u79fb\u52a8\u6784\u9020\u51fd\u6570\uff0c\u7528\u53f3\u503c\u5f15\u7528\u4f5c\u4e3a\u53c2\u6570\uff0c\u5173\u8054\u5230\u53f3\u503c\u5b9e\u53c2\uff0c\u5982\u8bed\u53e5#2\u4e2d\u7684allcaps(vstr)\u3002\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u53ef\u4ee5\u6267\u884c\u6df1\u590d\u5236\uff0c\u79fb\u52a8\u6784\u9020\u51fd\u6570\u53ea\u4fee\u6539\u8bb0\u5f55\u3002\u79fb\u52a8\u6784\u9020\u51fd\u6570\u8981\u628a\u6240\u6709\u6743\u8f6c\u79fb\u7ed9\u65b0\u5bf9\u8c61\uff0c\u53ef\u80fd\u4fee\u6539\u5176\u5b9e\u53c2\uff0c\u610f\u5473\u7740\u53f3\u503c\u5f15\u7528\u7684\u53c2\u6570\u4e0d\u662fconst\u7684\u3002","title":"\u4e3a\u4f55\u9700\u8981\u79fb\u52a8\u8bed\u4e49"},{"location":"cpp/#_3","text":"class Useless { private: int n; // number of elements char *pc; // pointer to data static int ct; // number of objects void ShowObject() const; public: Useless(); explicit Useless(int k); Useless(int k, char ch); Useless(const Useless &f); // regular copy constructor Useless(Useless &&f); // move constructor ~Useless(); Useless operator+(const Useless &f) const; void ShowData() const; }; Useless::Useless(const Useless &f) : n(f.n) { ++ct; cout << \"copy const called; number of objects: \" << ct << endl; pc = new char[n]; for (int i = 0; i < n; i++) pc[i] = f.pc[i]; ShowObject(); } Useless::Useless(Useless &&f) { ++ct; cout << \"move constructor called; number of objects: \" << ct << endl; pc = f.pc; //steal address f.pc = nullptr; f.n = 0; ShowObject(); } \u8fd9\u91cc\u53ea\u5217\u4e3e\u4e86\u666e\u901a\u7684\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u548c\u79fb\u52a8\u6784\u9020\u51fd\u6570\u3002\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u6267\u884c\u4e86\u6df1\u590d\u5236\uff0c\u800c\u79fb\u52a8\u6784\u9020\u51fd\u6570\u76f4\u63a5\u5c06pc\u6307\u5411\u73b0\u6709\u7684\u6570\u636e\u6765\u83b7\u53d6\u6240\u6709\u6743\u3002pc\u548cf.pc\u4e0d\u80fd\u6307\u5411\u540c\u4e00\u4e2a\u5730\u5740\uff0c\u56e0\u4e3a\u6790\u6784\u65f6\u4e0d\u80fddelete\u4e24\u6b21\uff0c\u6240\u4ee5\u8981\u5c06\u539f\u6765\u7684f.pc\u8bbe\u4e3anullptr\u3002\u8fd9\u91cc\u4fee\u6539\u4e86f\uff0c\u6240\u4ee5\u53c2\u6570\u58f0\u660e\u4e2d\u4e0d\u52a0const\u3002","title":"\u4e00\u4e2a\u79fb\u52a8\u793a\u4f8b"}]}